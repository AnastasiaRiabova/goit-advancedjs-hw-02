{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateRef = document.querySelector('#datetime-picker');\nconst buttonRef = document.querySelector('[data-start]');\nconst buttonReloadRef = document.querySelector('[data-reload]');\nconst dayRef = document.querySelector('[data-days]');\nconst hourRef = document.querySelector('[data-hours]');\nconst minutesRef = document.querySelector('[data-minutes]');\nconst secondsRef = document.querySelector('[data-seconds]');\nconst valuesRef = document.querySelectorAll('.value');\n\nlet timerId = null;\n\nbuttonRef.disabled = true;\n\nconst handleOnClose = selectedDates => {\n  if (selectedDates[0] <= Date.now()) {\n    buttonRef.disabled = true;\n    return iziToast.show({\n      message: 'Please choose a date in the future!',\n      color: 'red',\n      position: 'topRight',\n    });\n  }\n  buttonRef.disabled = false;\n};\n\nflatpickr(dateRef, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: handleOnClose,\n});\n\nconst handleStartClick = () => {\n  buttonRef.disabled = true;\n  dateRef.disabled = true;\n  timerId = setInterval(() => {\n    const chosenDate = new Date(dateRef.value);\n    const timeToFinish = chosenDate - Date.now();\n    const { days, hours, minutes, seconds } = convertMs(timeToFinish);\n    dayRef.textContent = formatValue(days);\n    hourRef.textContent = formatValue(hours);\n    minutesRef.textContent = formatValue(minutes);\n    secondsRef.textContent = formatValue(seconds);\n\n    if (timeToFinish < 1000) {\n      clearInterval(timerId);\n      dateRef.disabled = false;\n    }\n  }, 1000);\n};\nconst formatValue = value => `${value}`.padStart(2, '0');\n\nbuttonRef.addEventListener('click', handleStartClick);\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nbuttonReloadRef.addEventListener('click', () => location.reload());\n"],"names":["dateRef","buttonRef","buttonReloadRef","dayRef","hourRef","minutesRef","secondsRef","timerId","handleOnClose","selectedDates","iziToast","flatpickr","handleStartClick","timeToFinish","days","hours","minutes","seconds","convertMs","formatValue","value","ms"],"mappings":"+IAKA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAkB,SAAS,cAAc,eAAe,EACxDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAa,SAAS,cAAc,gBAAgB,EACxC,SAAS,iBAAiB,QAAQ,EAEpD,IAAIC,EAAU,KAEdN,EAAU,SAAW,GAErB,MAAMO,EAAgBC,GAAiB,CACrC,GAAIA,EAAc,IAAM,KAAK,IAAG,EAC9B,OAAAR,EAAU,SAAW,GACdS,EAAS,KAAK,CACnB,QAAS,sCACT,MAAO,MACP,SAAU,UAChB,CAAK,EAEHT,EAAU,SAAW,EACvB,EAEAU,EAAUX,EAAS,CACjB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAASQ,CACX,CAAC,EAED,MAAMI,EAAmB,IAAM,CAC7BX,EAAU,SAAW,GACrBD,EAAQ,SAAW,GACnBO,EAAU,YAAY,IAAM,CAE1B,MAAMM,EADa,IAAI,KAAKb,EAAQ,KAAK,EACP,KAAK,IAAG,EACpC,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAY,EAChEV,EAAO,YAAcgB,EAAYL,CAAI,EACrCV,EAAQ,YAAce,EAAYJ,CAAK,EACvCV,EAAW,YAAcc,EAAYH,CAAO,EAC5CV,EAAW,YAAca,EAAYF,CAAO,EAExCJ,EAAe,MACjB,cAAcN,CAAO,EACrBP,EAAQ,SAAW,GAEtB,EAAE,GAAI,CACT,EACMmB,EAAcC,GAAS,GAAGA,IAAQ,SAAS,EAAG,GAAG,EAEvDnB,EAAU,iBAAiB,QAASW,CAAgB,EAEpD,MAAMM,EAAYG,GAAM,CAMtB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEAf,EAAgB,iBAAiB,QAAS,IAAM,SAAS,OAAM,CAAE"}